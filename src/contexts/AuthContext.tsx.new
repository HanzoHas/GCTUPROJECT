import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';
import { auth, saveSessionToken, clearSessionToken, UserProfile } from '../lib/convex';
import { useToast } from '@/components/ui/use-toast';
import { Id } from '../../convex/_generated/dataModel';

// Define what auth.me() returns
interface BackendUser {
  id: Id<"users">;
  username: string;
  email: string;
  profilePicture?: string;
  status: "Available" | "Busy" | "In class" | "Offline";
  isAdmin: boolean;
}

type User = UserProfile;

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (email: string, password: string) => Promise<void>;
  register: (username: string, email: string, password: string, confirmPassword: string) => Promise<void>;
  logout: () => void;
  refreshUser: () => Promise<void>;
}
const AuthContext = createContext<AuthContextType>({
  user: null,
  isAuthenticated: false,
  isLoading: true,
  login: async () => {},
  register: async () => {},
  logout: () => {},
  refreshUser: async () => {},
});

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const { toast } = useToast();

  // Function to check auth status
  const checkAuth = async () => {
    try {
      const currentUser = await auth.me() as BackendUser | null;
      if (currentUser) {
        // Add the missing fields that UserProfile requires
        const userWithRequiredFields: UserProfile = {
          ...currentUser,
          role: 'student', // Set default role directly
          isOnline: true,
          lastSeen: Date.now()
        };
        setUser(userWithRequiredFields);
        setIsAuthenticated(true);
      } else {
        setUser(null);
        setIsAuthenticated(false);
        clearSessionToken();
      }
    } catch (error) {
      console.error('Auth check error:', error);
      setUser(null);
      setIsAuthenticated(false);
      clearSessionToken();
      
      // Show toast only if there was likely a previous session
      if (localStorage.getItem("sessionToken")) {
        toast({
          title: "Authentication Error",
          description: "Your session has expired. Please log in again.",
          variant: "destructive",
        });
      }
    } finally {
      setIsLoading(false);
    }
  };

